Index: app/src/main/java/com/example/radiocoveragetesting/testingActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.radiocoveragetesting;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.Color;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.HandlerThread;\r\nimport android.os.Looper;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport org.apache.sshd.client.SshClient;\r\nimport org.apache.sshd.client.channel.ClientChannel;\r\nimport org.apache.sshd.client.session.ClientSession;\r\nimport org.apache.sshd.common.SshException;\r\nimport org.apache.sshd.common.channel.Channel;\r\nimport org.apache.sshd.common.channel.exception.SshChannelOpenException;\r\nimport org.apache.sshd.server.forward.AcceptAllForwardingFilter;\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.OutputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\npublic class testingActivity extends AppCompatActivity implements AdapterView.OnItemSelectedListener {\r\n\r\n    TextView snrUp;\r\n    TextView snrDown;\r\n    TextView peakSnrUp;\r\n    TextView peakSnrDown;\r\n    TextView avgPwrUp;\r\n    TextView avgPwrDown;\r\n    TextView peakPwrUp;\r\n    TextView peakPwrDown;\r\n    TextView currentSector;\r\n    Button startStop;\r\n    Button export;\r\n    Button confirmSwitch;\r\n    String host, username, password;\r\n    Integer port;\r\n    Handler sshHandler;\r\n    ClientSession sshSession;\r\n    ClientChannel sshChannel;\r\n    ByteArrayOutputStream responseStream;\r\n    Runnable updater, establishSsh;\r\n    SshClient client;\r\n    Handler mainHandler;\r\n    HandlerThread thread;\r\n    ByteArrayOutputStream errStream;\r\n    Spinner spinnerBaseStation, spinnerSector;\r\n    Boolean retryFetchStat, retrySwitchSector;\r\n    Boolean updateEnabled;\r\n    String selectedSector;\r\n    Double highest_snr_up = -100000.0, highest_snr_down = -10000.0;\r\n    private final Context thisContext = this;\r\n    private boolean justStarted;\r\n\r\n\r\n    /**\r\n     * Automatically used on creation\r\n     * @param savedInstanceState record of what state the app was in previously\r\n     */\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        Log.d(\"test\", \"the testingActivity works\");\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_testing);\r\n        retryFetchStat = true;\r\n        retrySwitchSector = true;\r\n        spinnerBaseStation = findViewById(R.id.select_sector);\r\n        ArrayAdapter<CharSequence>adapter1 = ArrayAdapter.createFromResource(this, R.array.Base_station_list, android.R.layout.simple_spinner_item);\r\n        adapter1.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        spinnerBaseStation.setAdapter(adapter1);\r\n        spinnerBaseStation.setOnItemSelectedListener(this);\r\n\r\n        spinnerSector = findViewById(R.id.select_tower);\r\n\r\n\r\n\r\n        Intent intent = getIntent();\r\n\r\n        snrUp = findViewById(R.id.SNR_Up);\r\n        snrDown = findViewById(R.id.SNR_Down);\r\n        peakSnrUp = findViewById(R.id.peak_SNR_up);\r\n        peakSnrDown = findViewById(R.id.peak_SNR_down);\r\n        avgPwrUp = findViewById(R.id.avg_PWR_up);\r\n        avgPwrDown = findViewById(R.id.avg_PWR_down);\r\n        peakPwrUp = findViewById(R.id.peak_PWR_up);\r\n        peakPwrDown = findViewById(R.id.peak_PWR_down);\r\n        startStop = findViewById(R.id.start_stop);\r\n        export = findViewById(R.id.export);\r\n        currentSector = findViewById(R.id.cur_sector);\r\n        confirmSwitch = findViewById(R.id.confirm_sector);\r\n\r\n        //get login cred from intent\r\n        host = intent.getStringExtra(\"host\");\r\n        port = Integer.parseInt(intent.getStringExtra(\"port\"));\r\n        username = intent.getStringExtra(\"username\");\r\n        password = intent.getStringExtra(\"password\");\r\n\r\n        //I don't get what this does, but the code breaks without it\r\n        // Setting user.com property manually\r\n        // since isn't set by default in android\r\n        String key = \"user.home\";\r\n        Context sysContext;\r\n        sysContext = getApplicationContext();\r\n        String val = sysContext.getApplicationInfo().dataDir;\r\n        System.setProperty(key, val);\r\n\r\n        // Creating a client instance\r\n        client = SshClient.setUpDefaultClient();\r\n        client.setForwardingFilter(AcceptAllForwardingFilter.INSTANCE);\r\n        client.start();\r\n\r\n        //mainHandler allows a background thread to access main thread and update ui\r\n        //mainHandler = new Handler();\r\n\r\n        thread = new HandlerThread(\"MyHandlerThread\");\r\n        thread.start();\r\n        //sshHandler allows main thread to post runnable to background thread\r\n        sshHandler = new Handler(thread.getLooper());\r\n\r\n        //make a runnable to establish ssh session in background\r\n        establishSsh = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                try {\r\n                    establishSshSession();\r\n                }\r\n                catch (Exception e) {\r\n                    System.out.println(\"issue 1\");\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        };\r\n        mainHandler = new Handler(Looper.getMainLooper());\r\n\r\n\r\n        //activate the said runnable in background\r\n        sshHandler.post(establishSsh);\r\n\r\n        confirmSwitch.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view){\r\n                switchSector();\r\n                retrySwitchSector = true;\r\n            }\r\n        });\r\n\r\n\r\n\r\n        //Setting onClick Listener for Start/Stop Button\r\n        startStop.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                //Checks if button should start/stop ssh session\r\n                if(startStop.getText().equals(\"Start\")) {\r\n                    // Changes State of Button\r\n                    startStop.setText(\"Stop\");\r\n                    startStop.setBackgroundColor(Color.RED);\r\n\r\n                    updateEnabled = true;\r\n\r\n\r\n                    System.out.println(\"ssh established\");\r\n                    //create another runnable, for updates\r\n                    updater = new Runnable() {\r\n                        @Override\r\n                        public void run() {\r\n                            ArrayList<String> stat = fetchStats();\r\n\r\n                            Runnable myRunnable = new Runnable() {\r\n                                @Override\r\n                                public void run() {\r\n                                    updateStat(stat);\r\n                                    System.out.println(\"myRunnable running\");\r\n                                }\r\n                            };\r\n\r\n                            mainHandler.post(myRunnable);\r\n                            //sshHandler.postDelayed(updater,1000); //updateStat() does this now\r\n                        }\r\n                    };\r\n                    System.out.println(\"start update\");\r\n                    sshHandler.post(updater);\r\n                }\r\n                else {\r\n                    // Changes State of Button\r\n                    startStop.setText(\"Start\");\r\n                    startStop.setBackgroundColor(Color.GREEN);\r\n                    updateEnabled = false;\r\n                    /*\r\n                    try {\r\n                        sshHandler.removeCallbacks(updater);\r\n                        //sshHandler.removeCallbacks(establishSsh);\r\n                        //client.close();\r\n                        //thread.interrupt();\r\n                        System.out.println(\"Successfully Closed\");\r\n                    }\r\n\r\n\r\n                    catch(Exception e) {\r\n                        System.out.println(\"Either failed to close client or client did not exist\");\r\n                    }\r\n                    */\r\n\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates stat TextViews and also determines if update should continue\r\n     * Make sure to post it to mainHandler if using it in background\r\n     * @param stat ArrayList of stats\r\n     */\r\n    private void updateStat(ArrayList<String> stat) {\r\n        //TODO: need to make sure the titles are included and formatting is done correctly\r\n        System.out.println(\"updateStat() running\");\r\n\r\n        if (stat.size() > 7) {\r\n\r\n            snrUp.setText(\"SNR Up \\n\" + stat.get(0)); //good\r\n            snrDown.setText(\"SNR Down \\n\" + stat.get(1)); //good\r\n\r\n            if(Double.parseDouble(stat.get(0)) > highest_snr_up) {\r\n                highest_snr_up = Double.parseDouble(stat.get(0));\r\n            }\r\n            if(Double.parseDouble(stat.get(1)) > highest_snr_down) {\r\n                highest_snr_down = Double.parseDouble(stat.get(1));\r\n            }\r\n            peakSnrUp.setText(\"Peak SNR Up \\n\" + String.format(Locale.getDefault(), \"%f\", highest_snr_up));\r\n            peakSnrDown.setText(\"Peak SNR Down \\n\" + String.format(Locale.getDefault(), \"%f\", highest_snr_down));\r\n            avgPwrUp.setText(\"AVG PWR Up \\n\" + stat.get(4));\r\n            avgPwrDown.setText(\"AVG PWR Down \\n\" + stat.get(5));\r\n            peakPwrUp.setText(\"Peak PWR Up \\n\" + stat.get(6) + \" (\" + stat.get(7) + \")\");\r\n            peakPwrDown.setText(\"Peak PWR Down \\n\" +stat.get(8) + \" (\" + stat.get(9) + \")\");\r\n        }\r\n\r\n        if (updateEnabled){\r\n            sshHandler.postDelayed(updater,1000);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Obtains the current stats and returns it\r\n     * currently uses the command \"go\"\r\n     * @return Array of list of strings that contain signal stat\r\n     */\r\n    private ArrayList<String> fetchStats() {\r\n        //change the command to new command that returns current stats later\r\n        String command = \"go\\n\";\r\n        System.out.println(\"fetchStats() running)\");\r\n        ArrayList<String> ans = new ArrayList<>();\r\n        try {\r\n\r\n            // Open channel\r\n            sshChannel.open().verify(5, TimeUnit.SECONDS);\r\n            sshSession.resetIdleTimeout();\r\n\r\n            try {\r\n                OutputStream pipedIn = sshChannel.getInvertedIn();\r\n                pipedIn.write(command.getBytes());\r\n                System.out.println(\"sending command\");\r\n                pipedIn.flush();\r\n                pipedIn.close();\r\n            }\r\n            catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            //You gotta capture the string rather than\r\n            //scan it with scanner line-by-line because the stream constantly adds more\r\n            String responseString = new String(responseStream.toByteArray());\r\n            System.out.println(\"response string: \\n\" + responseString);\r\n            //break down the string into lines\r\n            String[] response = responseString.trim().split(\"\\n\");\r\n\r\n            //if this is first time the method is running since ssh connection\r\n            //was established, the output format will be wrong, so skip it once\r\n            if(!justStarted) {\r\n                //find the line containing the info we want\r\n                String answerLine = response[response.length - 2];\r\n                System.out.println(\"Testing line: \" + answerLine);//show it to log to manually check\r\n                //formatting the string\r\n                String[] answerArray = answerLine.split(\",\");\r\n                System.out.println(\"Post-process: \" +   Arrays.toString(answerArray));\r\n                //I just did response 4-11 because I don't know the actual format of stats\r\n                double[] pwr_downs = new double[]{Double.parseDouble(answerArray[6]),\r\n                        Double.parseDouble(answerArray[7]),Double.parseDouble(answerArray[8]),\r\n                        Double.parseDouble(answerArray[9])};\r\n                double[] pwr_ups = new double[]{Double.parseDouble(answerArray[21]),\r\n                        Double.parseDouble(answerArray[22]),Double.parseDouble(answerArray[23]),\r\n                        Double.parseDouble(answerArray[24])};\r\n                double avg_p_downs = (pwr_downs[0] + pwr_downs[1] + pwr_downs[2]+ pwr_downs[3])/4.0;\r\n                double avg_p_ups = (pwr_ups[0] + pwr_ups[1] + pwr_ups[2]+ pwr_ups[3])/4.0;\r\n                double peak_p_down = 10000; double peak_p_up = -10000;\r\n                String p_sector_down = \"A\"; String p_sector_up = \"A\";\r\n                String[] sector_conv = new String[]{\"A\", \"B\", \"C\", \"D\"};\r\n                for(int i = 0; i < 4; i++) {\r\n                    if(pwr_downs[i] < peak_p_down) {\r\n                        peak_p_down = pwr_downs[i];\r\n                        p_sector_down = sector_conv[i];\r\n                    }\r\n                    if(pwr_ups[i] > peak_p_up) {\r\n                        peak_p_up = pwr_ups[i];\r\n                        p_sector_up = sector_conv[i];\r\n                    }\r\n                }\r\n                ans.add(answerArray[20]);  //snrUp-good\r\n                ans.add(answerArray[5]);  //snrDown-good\r\n                ans.add(answerArray[20]);  //peakSnrUp-good\r\n                ans.add(answerArray[5]);  //peakSnrDown-good\r\n                ans.add(Double.toString(avg_p_ups));  //avgPwrUp-good\r\n                ans.add(Double.toString(avg_p_downs));  //avgPwrDown-good\r\n                ans.add(Double.toString(peak_p_up)); //peakPwrUp\r\n                ans.add(p_sector_up); //peakPwrUp Sector\r\n                ans.add(Double.toString(peak_p_down)); //peakPwrDown\r\n                ans.add(p_sector_down); //peakPwrDown Sector\r\n            }\r\n            justStarted = false;\r\n            retryFetchStat = true;\r\n        }\r\n        catch (Exception e) {\r\n            System.out.println(\"error in opening channel or getting response at fetchStat()\");\r\n            if((e instanceof SshChannelOpenException || e instanceof SshException) && (Objects.requireNonNull(e.getMessage()).trim().equals(\r\n                    \"open failed\") || Objects.requireNonNull(e.getMessage()).trim().equals(\r\n                    \"Session has been closed\"))) {\r\n                sshChannel.close(true);\r\n                sshSession.close(true);\r\n                try {\r\n                    responseStream.close();\r\n                }\r\n                catch (IOException e2) {\r\n                    e2.printStackTrace();\r\n                }\r\n                try {\r\n                    errStream.close();\r\n                }\r\n                catch (IOException e2) {\r\n                    e2.printStackTrace();\r\n                }\r\n                establishSshSession();\r\n                if (retryFetchStat) {  //checks that this is not the 2nd time in a row error has happened\r\n                    retryFetchStat = false;\r\n                    fetchStats();\r\n                }\r\n\r\n            }\r\n            System.out.println(\"stacktrace for why first attempt failed\");\r\n            e.printStackTrace();\r\n        }\r\n        return ans;\r\n    }\r\n\r\n    /**\r\n     * Establishes sshSession\r\n     * Pretty sure that you need to call it in background thread.\r\n     * use sshHandler.post() to run it in background\r\n     * @return true if session is successfully established, else false\r\n     */\r\n    private boolean establishSshSession(){\r\n\r\n        try {\r\n            sshSession = client.connect(username, host, port).verify(10000).getSession();\r\n            sshSession.addPasswordIdentity(password);\r\n            sshSession.auth().verify(50000);\r\n            sshChannel = sshSession.createChannel(Channel.CHANNEL_SHELL);\r\n            responseStream = new ByteArrayOutputStream();\r\n            sshChannel.setOut(responseStream);\r\n            //set error stream\r\n            errStream = new ByteArrayOutputStream();\r\n            sshChannel.setErr(errStream);\r\n            justStarted = true;\r\n            return true;\r\n        }\r\n        catch (Exception e) {\r\n            System.out.println(\"failed to establish session\");\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Automatically called when the app is to be closed\r\n     * Need to end the network thread or else it will consume resources after app's death\r\n     */\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        sshHandler.removeCallbacksAndMessages(null);\r\n        sshHandler.getLooper().quit();\r\n    }\r\n\r\n    /**\r\n     * Determines what action to take when user chooses something on spinner\r\n     * @param adapterView the spinner\r\n     * @param view I think context?\r\n     * @param position the location in terms of array\r\n     * @param l no idea\r\n     */\r\n    @Override\r\n    public void onItemSelected(AdapterView<?> adapterView, View view, int position, long l) {\r\n        Spinner spin = (Spinner) adapterView;\r\n        //String[] baseStationList = getResources().getStringArray(R.array.Base_station_list);\r\n        int sectorListId;\r\n        if(spin.getId() == R.id.select_sector)\r\n        {\r\n            String selectedBaseStation = adapterView.getItemAtPosition(position).toString();\r\n            switch (selectedBaseStation) {\r\n                case \"DEA DO\":\r\n                    sectorListId = R.array.DEA_DO_sector_list;\r\n                    break;\r\n                case \"Edinberg\":\r\n                    sectorListId = R.array.Edinberg_sector_list;\r\n                    break;\r\n                case \"Mission TX\":\r\n                    sectorListId = R.array.Mission_sector_list;\r\n                    break;\r\n                case \"Weslaco\":\r\n                    sectorListId = R.array.Weslaco_sector_list;\r\n                    break;\r\n                default:\r\n                    sectorListId = R.array.DEA_DO_sector_list; //merely a default. Should never happen\r\n                    System.out.println(\"problem processing base selection in onItemSelection()\");\r\n            }\r\n\r\n            ArrayAdapter<CharSequence>adapter2 = ArrayAdapter.createFromResource(this, sectorListId, android.R.layout.simple_spinner_item);\r\n            adapter2.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n            spinnerSector.setAdapter(adapter2);\r\n            spinnerSector.setOnItemSelectedListener(this);\r\n\r\n        }\r\n        else if(spin.getId() == R.id.select_tower)\r\n        {\r\n            selectedSector =  adapterView.getItemAtPosition(position).toString();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * runs when a view selects nothing\r\n     * @param adapterView the view that selected nothing\r\n     */\r\n    @Override\r\n    public void onNothingSelected(AdapterView<?> adapterView) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Runs when you hit the confirm sector switch button, commands pi to change config file\r\n     */\r\n    public void switchSector() {\r\n        String commandArg;\r\n        //TODO: find out what the arguments for switch command should be for each sector\r\n        switch (selectedSector) {\r\n            case \"DEA_NW\":\r\n                commandArg = \"placeholder\";\r\n                break;\r\n            case \"DEA_NE\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"DEA_SE\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"DEA_SW\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"Edinberg_W\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"Edinberg_E\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"Edinberg_S\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"Mission_W\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"Mission_N\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"Mission_E\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"Weslaco_NW\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"Weslaco_NE\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"Weslaco_SE\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"Weslaco_SW\":\r\n                commandArg = \"\";\r\n                break;\r\n            default:\r\n                commandArg = \"\";\r\n                System.out.println(\"This line should not run\");\r\n        }\r\n\r\n        Runnable switchSector = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                try {\r\n                    String command = \"switch \" + commandArg + \"\\n\";\r\n\r\n                    // Open channel\r\n                    sshChannel.open().verify(5, TimeUnit.SECONDS);\r\n                    sshSession.resetIdleTimeout();\r\n\r\n                    try {\r\n                        OutputStream pipedIn = sshChannel.getInvertedIn();\r\n                        pipedIn.write(command.getBytes());\r\n                        System.out.println(\"sending command\");\r\n                        pipedIn.flush();\r\n                        pipedIn.close();\r\n                    }\r\n                    catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    //TODO: when sending switch command, the output stream's new text can\r\n                    // mess up formatting for next update. Find a way around this\r\n\r\n                    retrySwitchSector = true;\r\n                    switchSectorSuccess(selectedSector);\r\n\r\n                    /*\r\n                    //You gotta capture the string rather than\r\n                    //scan it with scanner line-by-line because the stream constantly adds more\r\n                    String responseString = new String(responseStream.toByteArray());\r\n                    System.out.println(\"response string: \\n\" + responseString);\r\n                    //break down the string into lines\r\n                    String[] response = responseString.trim().split(\"\\n\");\r\n                    */\r\n\r\n                }\r\n                catch (Exception e) {\r\n                    System.out.println(\"error in opening channel or getting response at switchSector()\");\r\n                    if((e instanceof SshChannelOpenException || e instanceof SshException) && (Objects.requireNonNull(e.getMessage()).trim().equals(\r\n                            \"open failed\") || Objects.requireNonNull(e.getMessage()).trim().equals(\r\n                            \"Session has been closed\"))) {\r\n                        sshChannel.close(true);\r\n                        sshSession.close(true);\r\n                        try {\r\n                            responseStream.close();\r\n                        }\r\n                        catch (IOException e2) {\r\n                            e2.printStackTrace();\r\n                        }\r\n                        try {\r\n                            errStream.close();\r\n                        }\r\n                        catch (IOException e2) {\r\n                            e2.printStackTrace();\r\n                        }\r\n                        establishSshSession();\r\n                        if (retrySwitchSector) {  //checks that this is not the 2nd time in a row error has happened\r\n                            retrySwitchSector = false;\r\n                            switchSector();\r\n                        }\r\n\r\n                    }\r\n                    System.out.println(\"stacktrace for why first attempt failed\");\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        };\r\n\r\n        sshHandler.post(switchSector);\r\n    }\r\n\r\n    /**\r\n     * Used to make UI reflect successful sector switch\r\n     * @param newSectorName name of the sector you are switching to\r\n     */\r\n    public void switchSectorSuccess(String newSectorName) {\r\n        Runnable updateSector = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                currentSector.setText(\"Current sector: \" + newSectorName);\r\n                Toast toast = Toast.makeText(thisContext, \"Sector changed\", Toast.LENGTH_SHORT);\r\n                toast.show();\r\n            }\r\n        };\r\n        mainHandler.post(updateSector);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/radiocoveragetesting/testingActivity.java	(revision 6d6bbb8a66faf33e32490c1832ebc01df6e3f99f)
+++ app/src/main/java/com/example/radiocoveragetesting/testingActivity.java	(date 1625775631722)
@@ -28,6 +28,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
+import java.nio.channels.UnresolvedAddressException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Locale;
@@ -62,6 +63,7 @@
     Spinner spinnerBaseStation, spinnerSector;
     Boolean retryFetchStat, retrySwitchSector;
     Boolean updateEnabled;
+    Boolean isLoginAttempt;
     String selectedSector;
     Double highest_snr_up = -100000.0, highest_snr_down = -10000.0;
     private final Context thisContext = this;
@@ -78,6 +80,7 @@
         setContentView(R.layout.activity_testing);
         retryFetchStat = true;
         retrySwitchSector = true;
+        isLoginAttempt = true;
         spinnerBaseStation = findViewById(R.id.select_sector);
         ArrayAdapter<CharSequence>adapter1 = ArrayAdapter.createFromResource(this, R.array.Base_station_list, android.R.layout.simple_spinner_item);
         adapter1.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
@@ -375,9 +378,14 @@
     private boolean establishSshSession(){
 
         try {
-            sshSession = client.connect(username, host, port).verify(10000).getSession();
+
+            sshSession = client.connect(username, host, port).verify(5000).getSession();
+
+
+
+
             sshSession.addPasswordIdentity(password);
-            sshSession.auth().verify(50000);
+            sshSession.auth().verify(5000);
             sshChannel = sshSession.createChannel(Channel.CHANNEL_SHELL);
             responseStream = new ByteArrayOutputStream();
             sshChannel.setOut(responseStream);
@@ -388,6 +396,29 @@
             return true;
         }
         catch (Exception e) {
+            if (isLoginAttempt){
+                isLoginAttempt = false;
+                Intent loginFailIntent = new Intent(this, MainActivity.class);
+                if (e instanceof UnresolvedAddressException){
+                    System.out.println("error with address");
+                    loginFailIntent.putExtra("reason", "Invalid address");
+                }
+                else if (e instanceof SshException && e.getMessage().contains("timeout")){
+                    System.out.println("timeout error");
+                    loginFailIntent.putExtra("reason", "No response from login server");
+                }
+                else if (e instanceof SshException && e.getMessage().contains("No more authentication methods available")){
+                    System.out.println("verification");
+                    loginFailIntent.putExtra("reason", "Wrong username or password");
+                }
+                else {
+                    System.out.println("unknown error during login attempt");
+                    loginFailIntent.putExtra("reason", "Unknown");
+                }
+                startActivity(loginFailIntent);
+
+            }
+
             System.out.println("failed to establish session");
             e.printStackTrace();
             return false;
Index: app/src/main/java/com/example/radiocoveragetesting/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.radiocoveragetesting;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.os.Bundle;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        Button login = findViewById(R.id.button);\r\n        login.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                authenticate(v);\r\n            }\r\n        });\r\n    }\r\n\r\n    public void authenticate(View view) {\r\n\r\n        // Create an intent for sshActivity\r\n        Intent intent = new Intent(this, sshActivity.class);\r\n\r\n        // Declare fields\r\n        EditText editText = (EditText) findViewById(R.id.editText);\r\n        EditText portField = (EditText) findViewById(R.id.portField);\r\n        EditText usernameField = (EditText) findViewById(R.id.usernameField);\r\n        EditText passwordField = (EditText) findViewById(R.id.passwordField);\r\n\r\n        // Get input data from fields\r\n        String host = editText.getText().toString();\r\n        String port = portField.getText().toString();\r\n        String username = usernameField.getText().toString();\r\n        String password = passwordField.getText().toString();\r\n\r\n        // Pass on data to sshActivity via intent\r\n        intent.putExtra(\"host\", host);\r\n        intent.putExtra(\"port\", port);\r\n        intent.putExtra(\"username\", username);\r\n        intent.putExtra(\"password\", password);\r\n        startActivity(intent);\r\n        finish();\r\n    }\r\n\r\n    public void test(View view) {\r\n\r\n        // Create an intent for sshActivity\r\n        Intent intent = new Intent(this, testingActivity.class);\r\n\r\n        // Declare fields\r\n        EditText editText = (EditText) findViewById(R.id.editText);\r\n        EditText portField = (EditText) findViewById(R.id.portField);\r\n        EditText usernameField = (EditText) findViewById(R.id.usernameField);\r\n        EditText passwordField = (EditText) findViewById(R.id.passwordField);\r\n\r\n        // Get input data from fields\r\n        String host = editText.getText().toString();\r\n        String port = portField.getText().toString();\r\n        String username = usernameField.getText().toString();\r\n        String password = passwordField.getText().toString();\r\n\r\n        // Pass on data to sshActivity via intent\r\n        intent.putExtra(\"host\", host);\r\n        intent.putExtra(\"port\", port);\r\n        intent.putExtra(\"username\", username);\r\n        intent.putExtra(\"password\", password);\r\n        startActivity(intent);\r\n        finish();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/radiocoveragetesting/MainActivity.java	(revision 6d6bbb8a66faf33e32490c1832ebc01df6e3f99f)
+++ app/src/main/java/com/example/radiocoveragetesting/MainActivity.java	(date 1625776978896)
@@ -9,6 +9,7 @@
 import android.view.View;
 import android.widget.Button;
 import android.widget.EditText;
+import android.widget.Toast;
 
 import androidx.appcompat.app.AppCompatActivity;
 
@@ -19,12 +20,32 @@
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
         Button login = findViewById(R.id.button);
+        Intent intent = this.getIntent();
         login.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
                 authenticate(v);
             }
         });
+        if(intent.getExtras() != null){
+            String reason = intent.getStringExtra("reason");
+
+            Toast toast;
+            if (reason.equals("Invalid address")){
+                toast = Toast.makeText(this, "Invalid address", Toast.LENGTH_LONG);
+            }
+            else if (reason.equals("No response from login server")){
+                toast = Toast.makeText(this, "Login attempt timed out", Toast.LENGTH_LONG);
+            }
+            else if (reason.equals("Wrong username or password")){
+                toast = Toast.makeText(this, "Wrong username or password", Toast.LENGTH_LONG);
+            }
+            else {
+                toast = Toast.makeText(this, "Login failed", Toast.LENGTH_LONG);
+            }
+
+            toast.show();
+        }
     }
 
     public void authenticate(View view) {
