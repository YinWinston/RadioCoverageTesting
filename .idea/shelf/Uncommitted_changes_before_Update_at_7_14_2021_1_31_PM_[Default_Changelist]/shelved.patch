Index: app/src/main/java/com/example/radiocoveragetesting/testingActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.radiocoveragetesting;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.Color;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.HandlerThread;\r\nimport android.os.Looper;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\n\r\nimport org.apache.sshd.client.SshClient;\r\nimport org.apache.sshd.client.channel.ClientChannel;\r\nimport org.apache.sshd.client.scp.ScpClient;\r\nimport org.apache.sshd.client.scp.ScpClientCreator;\r\nimport org.apache.sshd.client.session.ClientSession;\r\nimport org.apache.sshd.common.SshException;\r\nimport org.apache.sshd.common.channel.Channel;\r\nimport org.apache.sshd.common.channel.exception.SshChannelOpenException;\r\nimport org.apache.sshd.server.forward.AcceptAllForwardingFilter;\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.OutputStream;\r\nimport java.lang.reflect.Array;\r\nimport java.nio.channels.UnresolvedAddressException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Locale;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\nimport java.util.Scanner;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\npublic class testingActivity extends AppCompatActivity implements AdapterView.OnItemSelectedListener {\r\n\r\n    TextView snrUp, snrDown, peakSnrUp, peakSnrDown, avgPwrUp, avgPwrDown, peakPwrUp;\r\n    TextView peakPwrDown, currentSector;\r\n    Button startStop, export, confirmSwitch;\r\n    String host, username, password;\r\n    Integer port;\r\n    Handler sshHandler;\r\n    ClientSession sshSession;\r\n    ClientChannel sshChannel;\r\n    ByteArrayOutputStream responseStream;\r\n    Runnable updater, establishSsh;\r\n    SshClient client;\r\n    Handler mainHandler;\r\n    HandlerThread thread;\r\n    ByteArrayOutputStream errStream;\r\n    Spinner spinnerBaseStation, spinnerSector;\r\n    Boolean retryFetchStat, retrySwitchSector;\r\n    Boolean updateEnabled, isLoginAttempt, sectorsSet, firstRun;\r\n    String selectedSector;\r\n    Double highest_snr_up = -100000.0, highest_snr_down = -10000.0;\r\n    ArrayList<String> coverageDatas = new ArrayList<>();\r\n    Map<String, ArrayList<String>> config_order;\r\n    ArrayList<String> BaseStations;\r\n\r\n    CoverageData cur_coverage;\r\n    FirebaseDatabase firebaseDatabase;\r\n    DatabaseReference databaseReference;\r\n\r\n    private final Context thisContext = this;\r\n    private boolean justStarted;\r\n\r\n\r\n    /**\r\n     * Automatically used on creation\r\n     * @param savedInstanceState record of what state the app was in previously\r\n     */\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        sectorsSet = false; firstRun = true;\r\n        Log.d(\"test\", \"the testingActivity works\");\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_testing);\r\n        retryFetchStat = true;\r\n        retrySwitchSector = true;\r\n        isLoginAttempt = true;\r\n        spinnerBaseStation = findViewById(R.id.select_sector);\r\n        ArrayAdapter<CharSequence>adapter1 = ArrayAdapter.createFromResource(this, R.array.Base_station_list, android.R.layout.simple_spinner_item);\r\n        adapter1.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        spinnerBaseStation.setAdapter(adapter1);\r\n        spinnerBaseStation.setOnItemSelectedListener(this);\r\n\r\n        spinnerSector = findViewById(R.id.select_tower);\r\n\r\n\r\n        Intent intent = getIntent();\r\n\r\n        snrUp = findViewById(R.id.SNR_Up);\r\n        snrDown = findViewById(R.id.SNR_Down);\r\n        peakSnrUp = findViewById(R.id.peak_SNR_up);\r\n        peakSnrDown = findViewById(R.id.peak_SNR_down);\r\n        avgPwrUp = findViewById(R.id.avg_PWR_up);\r\n        avgPwrDown = findViewById(R.id.avg_PWR_down);\r\n        peakPwrUp = findViewById(R.id.peak_PWR_up);\r\n        peakPwrDown = findViewById(R.id.peak_PWR_down);\r\n        startStop = findViewById(R.id.start_stop);\r\n        export = findViewById(R.id.export);\r\n        currentSector = findViewById(R.id.cur_sector);\r\n        confirmSwitch = findViewById(R.id.confirm_sector);\r\n\r\n        //get login cred from intent\r\n        host = intent.getStringExtra(\"host\");\r\n        port = Integer.parseInt(intent.getStringExtra(\"port\"));\r\n        username = intent.getStringExtra(\"username\");\r\n        password = intent.getStringExtra(\"password\");\r\n\r\n        export.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                //Crashes if you're connected to the Drive-5 Wifi, gotta connect to a diff one\r\n                /*Method doesn't work properly right now for some reason. Code seems to run w/o\r\n                error but the database doesn't update. Don't know how to fix this. */\r\n                //TODO: Use try catch statements here\r\n                System.out.println(\"Database Upload\");\r\n                firebaseDatabase = FirebaseDatabase.getInstance();\r\n                databaseReference = firebaseDatabase.getReference(\"CoverageData\").push();\r\n                for(int i = 0; i < coverageDatas.size(); i++){\r\n                    cur_coverage = new CoverageData();\r\n                    System.out.println(coverageDatas.get(i));\r\n                    addDataToFirebase(coverageDatas.get(i));\r\n                }\r\n            }\r\n        });\r\n\r\n        //I don't get what this does, but the code breaks without it\r\n        // Setting user.com property manually\r\n        // since isn't set by default in android\r\n        String key = \"user.home\";\r\n        Context sysContext;\r\n        sysContext = getApplicationContext();\r\n        String val = sysContext.getApplicationInfo().dataDir;\r\n        System.setProperty(key, val);\r\n\r\n        // Creating a client instance\r\n        client = SshClient.setUpDefaultClient();\r\n        client.setForwardingFilter(AcceptAllForwardingFilter.INSTANCE);\r\n        client.start();\r\n\r\n        //mainHandler allows a background thread to access main thread and update ui\r\n        //mainHandler = new Handler();\r\n\r\n        thread = new HandlerThread(\"MyHandlerThread\");\r\n        thread.start();\r\n        //sshHandler allows main thread to post runnable to background thread\r\n        sshHandler = new Handler(thread.getLooper());\r\n\r\n        //make a runnable to establish ssh session in background\r\n        establishSsh = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                try {\r\n                    establishSshSession();\r\n                }\r\n                catch (Exception e) {\r\n                    System.out.println(\"issue 1\");\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        };\r\n        mainHandler = new Handler(Looper.getMainLooper());\r\n\r\n\r\n        //activate the said runnable in background\r\n        sshHandler.post(establishSsh);\r\n\r\n        //set up confirmation button\r\n        confirmSwitch.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view){\r\n                switchSector();\r\n                retrySwitchSector = true;\r\n            }\r\n        });\r\n\r\n        //fetch config files\r\n        Runnable goFetchConfig = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                try {\r\n                    fetchConfig();\r\n                }\r\n                catch (Exception e) {\r\n                    System.out.println(\"issue fetching config\");\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        };\r\n\r\n        //run the above runnable\r\n        sshHandler.post(goFetchConfig);\r\n\r\n\r\n\r\n        //Setting onClick Listener for Start/Stop Button\r\n        startStop.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                //Checks if button should start/stop ssh session\r\n                if(startStop.getText().equals(\"Start\")) {\r\n                    // Changes State of Button\r\n                    startStop.setText(\"Stop\");\r\n                    startStop.setBackgroundColor(Color.RED);\r\n\r\n                    updateEnabled = true;\r\n\r\n\r\n                    System.out.println(\"ssh established\");\r\n                    //create another runnable, for updates\r\n                    updater = new Runnable() {\r\n                        @Override\r\n                        public void run() {\r\n                            ArrayList<String> stat = fetchStats();\r\n\r\n                            Runnable myRunnable = new Runnable() {\r\n                                @Override\r\n                                public void run() {\r\n                                    updateStat(stat);\r\n                                    System.out.println(\"myRunnable running\");\r\n                                }\r\n                            };\r\n\r\n                            mainHandler.post(myRunnable);\r\n                            //sshHandler.postDelayed(updater,1000); //updateStat() does this now\r\n                        }\r\n                    };\r\n                    System.out.println(\"start update\");\r\n                    sshHandler.post(updater);\r\n                }\r\n                else {\r\n                    // Changes State of Button\r\n                    startStop.setText(\"Start\");\r\n                    startStop.setBackgroundColor(Color.GREEN);\r\n                    updateEnabled = false;\r\n                    /*\r\n                    try {\r\n                        sshHandler.removeCallbacks(updater);\r\n                        //sshHandler.removeCallbacks(establishSsh);\r\n                        //client.close();\r\n                        //thread.interrupt();\r\n                        System.out.println(\"Successfully Closed\");\r\n                    }\r\n\r\n\r\n                    catch(Exception e) {\r\n                        System.out.println(\"Either failed to close client or client did not exist\");\r\n                    }\r\n                    */\r\n\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates stat TextViews and also determines if update should continue\r\n     * Make sure to post it to mainHandler if using it in background\r\n     * @param stat ArrayList of stats\r\n     */\r\n    private void updateStat(ArrayList<String> stat) {\r\n        //TODO: need to make sure the titles are included and formatting is done correctly\r\n        System.out.println(\"updateStat() running\");\r\n\r\n        if (stat.size() > 7) {\r\n\r\n            snrUp.setText(\"SNR Up \\n\" + stat.get(0)); //good\r\n            snrDown.setText(\"SNR Down \\n\" + stat.get(1)); //good\r\n\r\n            if(Double.parseDouble(stat.get(0)) > highest_snr_up) {\r\n                highest_snr_up = Double.parseDouble(stat.get(0));\r\n            }\r\n            if(Double.parseDouble(stat.get(1)) > highest_snr_down) {\r\n                highest_snr_down = Double.parseDouble(stat.get(1));\r\n            }\r\n            peakSnrUp.setText(\"Peak SNR Up \\n\" + String.format(Locale.getDefault(), \"%f\", highest_snr_up));\r\n            peakSnrDown.setText(\"Peak SNR Down \\n\" + String.format(Locale.getDefault(), \"%f\", highest_snr_down));\r\n            avgPwrUp.setText(\"AVG PWR Up \\n\" + stat.get(4));\r\n            avgPwrDown.setText(\"AVG PWR Down \\n\" + stat.get(5));\r\n            peakPwrUp.setText(\"Peak PWR Up \\n\" + stat.get(6) + \" (\" + stat.get(7) + \")\");\r\n            peakPwrDown.setText(\"Peak PWR Down \\n\" +stat.get(8) + \" (\" + stat.get(9) + \")\");\r\n        }\r\n\r\n        if (updateEnabled){\r\n            sshHandler.postDelayed(updater,1000);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Obtains the current stats and returns it\r\n     * currently uses the command \"go\"\r\n     * @return Array of list of strings that contain signal stat\r\n     */\r\n    private ArrayList<String> fetchStats() {\r\n        //change the command to new command that returns current stats later\r\n        String command = \"go\\n\";\r\n        System.out.println(\"fetchStats() running)\");\r\n        ArrayList<String> ans = new ArrayList<>();\r\n        try {\r\n\r\n            // Open channel\r\n            sshChannel.open().verify(5, TimeUnit.SECONDS);\r\n            sshSession.resetIdleTimeout();\r\n\r\n            try {\r\n                OutputStream pipedIn = sshChannel.getInvertedIn();\r\n                pipedIn.write(command.getBytes());\r\n                System.out.println(\"sending command\");\r\n                pipedIn.flush();\r\n                pipedIn.close();\r\n            }\r\n            catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            //You gotta capture the string rather than\r\n            //scan it with scanner line-by-line because the stream constantly adds more\r\n            String responseString = new String(responseStream.toByteArray());\r\n\r\n            System.out.println(\"response string: \\n\" + responseString);\r\n            //break down the string into lines\r\n            String[] response = responseString.trim().split(\"\\n\");\r\n\r\n            //if this is first time the method is running since ssh connection\r\n            //was established, the output format will be wrong, so skip it once\r\n            if(!justStarted) {\r\n                //find the line containing the info we want\r\n                String answerLine = response[response.length - 2];\r\n                coverageDatas.add(answerLine);\r\n                System.out.println(\"Testing line: \" + answerLine);//show it to log to manually check\r\n                //formatting the string\r\n                String[] answerArray = answerLine.split(\",\");\r\n                System.out.println(\"Post-process: \" +   Arrays.toString(answerArray));\r\n                double[] pwr_downs = new double[]{Double.parseDouble(answerArray[6]),\r\n                        Double.parseDouble(answerArray[7]),Double.parseDouble(answerArray[8]),\r\n                        Double.parseDouble(answerArray[9])};\r\n                double[] pwr_ups = new double[]{Double.parseDouble(answerArray[21]),\r\n                        Double.parseDouble(answerArray[22]),Double.parseDouble(answerArray[23]),\r\n                        Double.parseDouble(answerArray[24])};\r\n                double avg_p_downs = (pwr_downs[0] + pwr_downs[1] + pwr_downs[2]+ pwr_downs[3])/4.0;\r\n                double avg_p_ups = (pwr_ups[0] + pwr_ups[1] + pwr_ups[2]+ pwr_ups[3])/4.0;\r\n                double peak_p_down = 10000; double peak_p_up = -10000;\r\n                String p_sector_down = \"A\"; String p_sector_up = \"A\";\r\n                String[] sector_conv = new String[]{\"A\", \"B\", \"C\", \"D\"};\r\n                for(int i = 0; i < 4; i++) {\r\n                    if(pwr_downs[i] < peak_p_down) {\r\n                        peak_p_down = pwr_downs[i];\r\n                        p_sector_down = sector_conv[i];\r\n                    }\r\n                    if(pwr_ups[i] > peak_p_up) {\r\n                        peak_p_up = pwr_ups[i];\r\n                        p_sector_up = sector_conv[i];\r\n                    }\r\n                }\r\n                ans.add(answerArray[20]);  //snrUp-good\r\n                ans.add(answerArray[5]);  //snrDown-good\r\n                ans.add(answerArray[20]);  //peakSnrUp-good\r\n                ans.add(answerArray[5]);  //peakSnrDown-good\r\n                ans.add(Double.toString(avg_p_ups));  //avgPwrUp-good\r\n                ans.add(Double.toString(avg_p_downs));  //avgPwrDown-good\r\n                ans.add(Double.toString(peak_p_up)); //peakPwrUp\r\n                ans.add(p_sector_up); //peakPwrUp Sector\r\n                ans.add(Double.toString(peak_p_down)); //peakPwrDown\r\n                ans.add(p_sector_down); //peakPwrDown Sector\r\n            }\r\n            justStarted = false;\r\n            retryFetchStat = true;\r\n        }\r\n        catch (Exception e) {\r\n            System.out.println(\"error in opening channel or getting response at fetchStat()\");\r\n            if((e instanceof SshChannelOpenException || e instanceof SshException) && (Objects.requireNonNull(e.getMessage()).trim().equals(\r\n                    \"open failed\") || Objects.requireNonNull(e.getMessage()).trim().equals(\r\n                    \"Session has been closed\"))) {\r\n                sshChannel.close(true);\r\n                sshSession.close(true);\r\n                try {\r\n                    responseStream.close();\r\n                }\r\n                catch (IOException e2) {\r\n                    e2.printStackTrace();\r\n                }\r\n                try {\r\n                    errStream.close();\r\n                }\r\n                catch (IOException e2) {\r\n                    e2.printStackTrace();\r\n                }\r\n                establishSshSession();\r\n                if (retryFetchStat) {  //checks that this is not the 2nd time in a row error has happened\r\n                    retryFetchStat = false;\r\n                    fetchStats();\r\n                }\r\n\r\n            }\r\n            System.out.println(\"stacktrace for why first attempt failed\");\r\n            e.printStackTrace();\r\n        }\r\n        return ans;\r\n    }\r\n\r\n    /**\r\n     * Establishes sshSession\r\n     * Pretty sure that you need to call it in background thread.\r\n     * use sshHandler.post() to run it in background\r\n     * @return true if session is successfully established, else false\r\n     */\r\n    private boolean establishSshSession(){\r\n\r\n        try {\r\n\r\n            sshSession = client.connect(username, host, port).verify(5000).getSession();\r\n\r\n\r\n\r\n\r\n            sshSession.addPasswordIdentity(password);\r\n            sshSession.auth().verify(5000);\r\n            sshChannel = sshSession.createChannel(Channel.CHANNEL_SHELL);\r\n            responseStream = new ByteArrayOutputStream();\r\n            sshChannel.setOut(responseStream);\r\n            //set error stream\r\n            errStream = new ByteArrayOutputStream();\r\n            sshChannel.setErr(errStream);\r\n            justStarted = true;\r\n            //point where I originally ran the fetchConfig code\r\n//            if(!sectorsSet) {\r\n//                sectorsSet = true;\r\n//                try {\r\n//                    fetchConfig();\r\n//                }\r\n//                catch(Exception e) {\r\n//                    e.printStackTrace();\r\n//                }\r\n//            }\r\n            return true;\r\n        }\r\n        catch (Exception e) {\r\n            if (isLoginAttempt){\r\n                isLoginAttempt = false;\r\n                Intent loginFailIntent = new Intent(this, MainActivity.class);\r\n                if (e instanceof UnresolvedAddressException){\r\n                    System.out.println(\"error with address\");\r\n                    loginFailIntent.putExtra(\"reason\", \"Invalid address\");\r\n                }\r\n                else if (e instanceof SshException && e.getMessage().contains(\"timeout\")){\r\n                    System.out.println(\"timeout error\");\r\n                    loginFailIntent.putExtra(\"reason\", \"No response from login server\");\r\n                }\r\n                else if (e instanceof SshException && e.getMessage().contains(\"No more authentication methods available\")){\r\n                    System.out.println(\"verification\");\r\n                    loginFailIntent.putExtra(\"reason\", \"Wrong username or password\");\r\n                }\r\n                else {\r\n                    System.out.println(\"unknown error during login attempt\");\r\n                    loginFailIntent.putExtra(\"reason\", \"Unknown\");\r\n                }\r\n                startActivity(loginFailIntent);\r\n\r\n            }\r\n\r\n            System.out.println(\"failed to establish session\");\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Automatically called when the app is to be closed\r\n     * Need to end the network thread or else it will consume resources after app's death\r\n     */\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        sshHandler.removeCallbacksAndMessages(null);\r\n        sshHandler.getLooper().quit();\r\n    }\r\n\r\n    /**\r\n     * Determines what action to take when user chooses something on spinner\r\n     * @param adapterView the spinner\r\n     * @param view I think context?\r\n     * @param position the location in terms of array\r\n     * @param l no idea\r\n     */\r\n    @Override\r\n    public void onItemSelected(AdapterView<?> adapterView, View view, int position, long l) {\r\n        Spinner spin = (Spinner) adapterView;\r\n        //String[] baseStationList = getResources().getStringArray(R.array.Base_station_list);\r\n        int sectorListId;\r\n        if(spin.getId() == R.id.select_sector)\r\n        {\r\n            String selectedBaseStation = adapterView.getItemAtPosition(position).toString();\r\n            switch (selectedBaseStation) {\r\n                case \"DEA DO\":\r\n                    sectorListId = R.array.DEA_DO_sector_list;\r\n                    break;\r\n                case \"Edinberg\":\r\n                    sectorListId = R.array.Edinberg_sector_list;\r\n                    break;\r\n                case \"Mission TX\":\r\n                    sectorListId = R.array.Mission_sector_list;\r\n                    break;\r\n                case \"Weslaco\":\r\n                    sectorListId = R.array.Weslaco_sector_list;\r\n                    break;\r\n                default:\r\n                    sectorListId = R.array.DEA_DO_sector_list; //merely a default. Should never happen\r\n                    System.out.println(\"problem processing base selection in onItemSelection()\");\r\n            }\r\n\r\n            ArrayAdapter<CharSequence>adapter2 = ArrayAdapter.createFromResource(this, sectorListId, android.R.layout.simple_spinner_item);\r\n            adapter2.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n            spinnerSector.setAdapter(adapter2);\r\n            spinnerSector.setOnItemSelectedListener(this);\r\n\r\n        }\r\n        else if(spin.getId() == R.id.select_tower)\r\n        {\r\n            selectedSector =  adapterView.getItemAtPosition(position).toString();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * runs when a view selects nothing\r\n     * @param adapterView the view that selected nothing\r\n     */\r\n    @Override\r\n    public void onNothingSelected(AdapterView<?> adapterView) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Runs when you hit the confirm sector switch button, commands pi to change config file\r\n     */\r\n    public void switchSector() {\r\n        String commandArg;\r\n        //TODO: find out what the arguments for switch command should be for each sector\r\n        switch (selectedSector) {\r\n            case \"DEA_NW\":\r\n                commandArg = \"placeholder\";\r\n                break;\r\n            case \"DEA_NE\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"DEA_SE\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"DEA_SW\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"Edinberg_W\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"Edinberg_E\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"Edinberg_S\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"Mission_W\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"Mission_N\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"Mission_E\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"Weslaco_NW\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"Weslaco_NE\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"Weslaco_SE\":\r\n                commandArg = \"\";\r\n                break;\r\n            case \"Weslaco_SW\":\r\n                commandArg = \"\";\r\n                break;\r\n            default:\r\n                commandArg = \"\";\r\n                System.out.println(\"This line should not run\");\r\n        }\r\n\r\n        Runnable switchSector = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                try {\r\n                    String command = \"switch \" + commandArg + \"\\n\";\r\n\r\n                    // Open channel\r\n                    sshChannel.open().verify(5, TimeUnit.SECONDS);\r\n                    sshSession.resetIdleTimeout();\r\n\r\n                    try {\r\n                        OutputStream pipedIn = sshChannel.getInvertedIn();\r\n                        pipedIn.write(command.getBytes());\r\n                        System.out.println(\"sending command\");\r\n                        pipedIn.flush();\r\n                        pipedIn.close();\r\n                    }\r\n                    catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    //TODO: when sending switch command, the output stream's new text can\r\n                    // mess up formatting for next stat display update. Find a way around this.\r\n\r\n                    retrySwitchSector = true;\r\n                    switchSectorSuccess(selectedSector);\r\n\r\n                    /*\r\n                    //You gotta capture the string rather than\r\n                    //scan it with scanner line-by-line because the stream constantly adds more\r\n                    String responseString = new String(responseStream.toByteArray());\r\n                    System.out.println(\"response string: \\n\" + responseString);\r\n                    //break down the string into lines\r\n                    String[] response = responseString.trim().split(\"\\n\");\r\n                    */\r\n\r\n                }\r\n                catch (Exception e) {\r\n                    System.out.println(\"error in opening channel or getting response at switchSector()\");\r\n                    if((e instanceof SshChannelOpenException || e instanceof SshException) && (Objects.requireNonNull(e.getMessage()).trim().equals(\r\n                            \"open failed\") || Objects.requireNonNull(e.getMessage()).trim().equals(\r\n                            \"Session has been closed\"))) {\r\n                        sshChannel.close(true);\r\n                        sshSession.close(true);\r\n                        try {\r\n                            responseStream.close();\r\n                        }\r\n                        catch (IOException e2) {\r\n                            e2.printStackTrace();\r\n                        }\r\n                        try {\r\n                            errStream.close();\r\n                        }\r\n                        catch (IOException e2) {\r\n                            e2.printStackTrace();\r\n                        }\r\n                        establishSshSession();\r\n                        if (retrySwitchSector) {  //checks that this is not the 2nd time in a row error has happened\r\n                            retrySwitchSector = false;\r\n                            switchSector();\r\n                        }\r\n\r\n                    }\r\n                    System.out.println(\"stacktrace for why first attempt failed\");\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        };\r\n\r\n        sshHandler.post(switchSector);\r\n    }\r\n\r\n    /**\r\n     * Used to make UI reflect successful sector switch\r\n     * @param newSectorName name of the sector you are switching to\r\n     */\r\n    public void switchSectorSuccess(String newSectorName) {\r\n        Runnable updateSector = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                currentSector.setText(\"Current sector: \" + newSectorName);\r\n                Toast toast = Toast.makeText(thisContext, \"Sector changed\", Toast.LENGTH_SHORT);\r\n                toast.show();\r\n            }\r\n        };\r\n        mainHandler.post(updateSector);\r\n    }\r\n    //TODO: Change to parse all of the different statistics independently\r\n    private void addDataToFirebase(String wholeString) {\r\n        // below are the lines of code is used to set the data in our object class.\r\n        cur_coverage.setWholeString(wholeString);\r\n        //databaseReference.child(\"CoverageData\").setValue(cur_coverage);\r\n        // we are use add value event listener method\r\n        // which is called with database reference.\r\n//        databaseReference.addValueEventListener(new ValueEventListener() {\r\n//            @Override\r\n//            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n//                // inside the method of on Data change we are setting\r\n//                // our object class to our database reference.\r\n//                // data base reference will sends data to firebase.\r\n//\r\n//\r\n//                // after adding this data we are showing toast message.\r\n////                Toast.makeText(MainActivity.this, \"data added\", Toast.LENGTH_SHORT).show();\r\n//            }\r\n//\r\n//            @Override\r\n//            public void onCancelled(@NonNull DatabaseError error) {\r\n//                // if the data is not added or it is cancelled then\r\n//                // we are displaying a failure toast message.\r\n////                Toast.makeText(MainActivity.this, \"Fail to add data \" + error, Toast.LENGTH_SHORT).show();\r\n//            }\r\n//        });\r\n    }\r\n\r\n    /**\r\n     * Uses SCP to download base station config file\r\n     */\r\n    private void fetchConfig() {\r\n        //change the command to new command that fetches config file later\r\n        String command = \"cat bin/ConfigList.txt \\n\";\r\n        System.out.println(\"fetchConfig() running)\");\r\n        ArrayList<String> ans = new ArrayList<>();\r\n        String responseString;\r\n        String[] response = new String[0];\r\n        try {\r\n\r\n            // Open channel\r\n            sshChannel.open().verify(5, TimeUnit.SECONDS);\r\n            sshSession.resetIdleTimeout();\r\n\r\n\r\n            //Example use of scp creator: https://stackoverflow.com/questions/62692515/how-to-upload-download-files-using-apache-sshd-scpclient\r\n            File configFile = new File(getFilesDir() + \"/config.csv\");\r\n            FileOutputStream fileOutputStream = new FileOutputStream(configFile);\r\n            ScpClientCreator creator = ScpClientCreator.instance();\r\n            ScpClient scpClient = creator.createScpClient(sshSession);\r\n            scpClient.download(\"bin/ConfigList.csv\", fileOutputStream);\r\n            //TODO: make the scanner parse CSV file and make arrays for the ui element to use\r\n            //TODO: perhaps make a button to retry retrieving a config file\r\n            //TODO: Just return the arraylist containing all of the file lines to exit this method\r\n            ArrayList<String> config = new ArrayList<>();\r\n            try {\r\n                Scanner scanner = new Scanner(new File(getFilesDir() + \"/config.csv\"));\r\n                while(scanner.hasNextLine()) {\r\n                    String cur_line = scanner.nextLine();\r\n                    config.add(cur_line);\r\n                }\r\n                System.out.println(\"Successfully read from config file\" + config.get(0) + config.get(1));\r\n                processConfigs(config);\r\n            }\r\n            catch(Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        catch (Exception e) {\r\n            System.out.println(\"error in opening channel or getting response at fetchConfig()\");\r\n            if((e instanceof SshChannelOpenException || e instanceof SshException) && (Objects.requireNonNull(e.getMessage()).trim().equals(\r\n                    \"open failed\") || Objects.requireNonNull(e.getMessage()).trim().equals(\r\n                    \"Session has been closed\"))) {\r\n                sshChannel.close(true);\r\n                sshSession.close(true);\r\n                try {\r\n                    responseStream.close();\r\n                }\r\n                catch (IOException e2) {\r\n                    e2.printStackTrace();\r\n                }\r\n                try {\r\n                    errStream.close();\r\n                }\r\n                catch (IOException e2) {\r\n                    e2.printStackTrace();\r\n                }\r\n                establishSshSession();\r\n\r\n\r\n            }\r\n            System.out.println(\"stacktrace for fetchConfig() failing\");\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method to process string extracted from config csv file\r\n     * @param items  string ArrayList containing info from the config file\r\n     */\r\n    void processConfigs(ArrayList<String> items) {\r\n        //Order is as follows: Area name, Sector label, Radio tab, config file directory\r\n        //Order will be subject to change\r\n        //BaseStations arraylist stores list of base stations\r\n        for(int i = 0; i < items.size(); i++) {\r\n            String[] temp = items.get(i).split(\",\");\r\n            if(config_order.get(temp[0]) == null) {\r\n                config_order.get(temp[0]).add(temp[1]);\r\n                BaseStations.add(temp[0]);\r\n            }\r\n            else {\r\n                config_order.put(temp[0], new ArrayList<String>());\r\n            }\r\n        }\r\n\r\n        // set the adapter for the base station list to BaseStations\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/radiocoveragetesting/testingActivity.java	(revision 6671dc9c178a679902888e0785e3b21d73b58abf)
+++ app/src/main/java/com/example/radiocoveragetesting/testingActivity.java	(date 1626277975898)
@@ -87,21 +87,14 @@
      * @param savedInstanceState record of what state the app was in previously
      */
     protected void onCreate(Bundle savedInstanceState) {
-        sectorsSet = false; firstRun = true;
-        Log.d("test", "the testingActivity works");
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_testing);
+        sectorsSet = false;
+        firstRun = true;
         retryFetchStat = true;
         retrySwitchSector = true;
         isLoginAttempt = true;
-        spinnerBaseStation = findViewById(R.id.select_sector);
-        ArrayAdapter<CharSequence>adapter1 = ArrayAdapter.createFromResource(this, R.array.Base_station_list, android.R.layout.simple_spinner_item);
-        adapter1.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        spinnerBaseStation.setAdapter(adapter1);
-        spinnerBaseStation.setOnItemSelectedListener(this);
-
-        spinnerSector = findViewById(R.id.select_tower);
-
+        //Log.d("test", "the testingActivity works");
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_testing);
 
         Intent intent = getIntent();
 
@@ -117,6 +110,8 @@
         export = findViewById(R.id.export);
         currentSector = findViewById(R.id.cur_sector);
         confirmSwitch = findViewById(R.id.confirm_sector);
+        spinnerBaseStation = findViewById(R.id.select_sector);
+        spinnerSector = findViewById(R.id.select_tower);
 
         //get login cred from intent
         host = intent.getStringExtra("host");
@@ -142,7 +137,7 @@
             }
         });
 
-        //I don't get what this does, but the code breaks without it
+
         // Setting user.com property manually
         // since isn't set by default in android
         String key = "user.home";
@@ -151,7 +146,7 @@
         String val = sysContext.getApplicationInfo().dataDir;
         System.setProperty(key, val);
 
-        // Creating a client instance
+        // Creating a ssh client instance
         client = SshClient.setUpDefaultClient();
         client.setForwardingFilter(AcceptAllForwardingFilter.INSTANCE);
         client.start();
@@ -183,15 +178,6 @@
         //activate the said runnable in background
         sshHandler.post(establishSsh);
 
-        //set up confirmation button
-        confirmSwitch.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view){
-                switchSector();
-                retrySwitchSector = true;
-            }
-        });
-
         //fetch config files
         Runnable goFetchConfig = new Runnable() {
             @Override
@@ -209,7 +195,19 @@
         //run the above runnable
         sshHandler.post(goFetchConfig);
 
+        ArrayAdapter<CharSequence>adapter1 = ArrayAdapter.createFromResource(this, R.array.Base_station_list, android.R.layout.simple_spinner_item);
+        adapter1.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        spinnerBaseStation.setAdapter(adapter1);
+        spinnerBaseStation.setOnItemSelectedListener(this);
 
+        //set up confirmation button
+        confirmSwitch.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view){
+                switchSector();
+                retrySwitchSector = true;
+            }
+        });
 
         //Setting onClick Listener for Start/Stop Button
         startStop.setOnClickListener(new View.OnClickListener() {
